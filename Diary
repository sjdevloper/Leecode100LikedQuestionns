1.Two Sum
a. The key to the problem is that there is always only one pair of numbers that will satisfy. 
b. I suppose there is an equation that xa + xb = target.
c. Because I already know the target as long as it maintains a record of all previous values in the list I can compare the current value(xa) to its only pair, if it exists, in the record of all previous values(xb);
d. To keep the record of the previous values and their indices, I have used the map, Commonly known as a dictionary, in another language.

______________________________________________
20. Valid Parentheses
a. Push the right parentheses '),''],' or '}' into the stack each time when encounter left one.
b. Check if they are matching.
c. If not, the string is not a valid one.
d. At last, check if the stack is empty, return true/false.

______________________________________________
21. Merge two sorted list
a. Create variable output and initialize it with whichever list has the smaller first element.
b. Initialize curr = output, store the reference to the last element in output.
c. Iterate until any of the lists reaches its end.
d. Compare and return output.
e. TimeComplexity: O(N+M);SpaceComplexity: O(1);

______________________________________________
35. Search Insert Position
a. Create a help function
b. Doing binary search in the help function
c. Call function and return
d. TimeComplexity: O(logn);SpaceComplexity: O(1);

______________________________________________
53.  Maximum Subarray
a. DP programming: Kadanes's Algorithm
b. Initialize max and max_end;
c. Iterate the array and add each element to max_end;
d. if at any point has ngative, resign it to 0;
e. updating max and return max;
